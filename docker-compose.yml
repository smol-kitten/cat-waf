services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    container_name: waf-nginx
    environment:
      - TZ=${TZ:-Europe/Berlin}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # All configuration now in volumes (managed via Docker)
      - waf-nginx-conf:/etc/nginx/conf.d
      - waf-nginx-sites:/etc/nginx/sites-enabled
      - waf-nginx-modsecurity:/etc/nginx/modsecurity
      # Data volumes (persistent across deployments)
      - waf-logs:/var/log
      - waf-certs:/etc/nginx/certs
      - waf-certs:/acme.sh  # Mount acme storage at /acme.sh for direct access to certificates
      - waf-fail2ban:/etc/fail2ban
    networks:
      - waf-network
      - backend-network
    restart: unless-stopped

  fail2ban:
    build:
      context: ./fail2ban
      dockerfile: Dockerfile
    container_name: waf-fail2ban
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      # Configuration files (consolidated into single volume)
      - waf-fail2ban:/etc/fail2ban
      # Data volumes (persistent logs - read-only, specific subdirectories)
      - waf-logs:/mnt/logs:ro
      # Socket for communication
      - fail2ban-socket:/var/run/fail2ban
    networks:
      - waf-network
    restart: unless-stopped
    depends_on:
      - nginx

  mariadb:
    image: mariadb:latest
    container_name: waf-mariadb
    environment:
      TZ: ${TZ:-Europe/Berlin}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-changeme}
      MYSQL_DATABASE: waf_db
      MYSQL_USER: waf_user
      MYSQL_PASSWORD: ${DB_PASSWORD:-changeme}
    volumes:
      # Database data (volume for persistence)
      - waf-mysql-data:/var/lib/mysql
      # Initialization scripts (bind mount for first-run setup)
      - ./mariadb/init:/docker-entrypoint-initdb.d:ro
    networks:
      - waf-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 10s
      timeout: 5s
      retries: 5

  migration-runner:
    build:
      context: .
      dockerfile: mariadb/Dockerfile
    container_name: waf-migration-runner
    environment:
      DB_PASSWORD: ${DB_PASSWORD:-changeme}
    networks:
      - waf-network
    depends_on:
      mariadb:
        condition: service_healthy
    restart: "no"

  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: waf-dashboard
    volumes:
      # Application code (now built into image)
      # Data volumes (read-only access to logs)
      - waf-logs:/var/log
      # Configuration access (via volumes)
      - waf-nginx-sites:/etc/nginx/sites-enabled
      - waf-fail2ban:/etc/fail2ban
      - ./fail2ban-socket:/var/run/fail2ban
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount updater compose file for reset functionality
      - ./docker-compose.updater.yml:/compose-files/docker-compose.updater.yml

    networks:
      - waf-network
    restart: unless-stopped
    depends_on:
      - mariadb
      - migration-runner
    environment:
      TZ: ${TZ:-Europe/Berlin}
      DB_HOST: mariadb
      DB_NAME: waf_db
      DB_USER: waf_user
      DB_PASSWORD: ${DB_PASSWORD:-your_waf_password_here}
      DASHBOARD_API_KEY: ${DASHBOARD_API_KEY:-change-this-default-token}
      # Cloudflare API credentials (for zone auto-detection)
      # Recommended: Use API Token with Zone:Read permission
      # Legacy: Use CF_API_KEY + CF_EMAIL (from ACME DNS challenge config)
      CLOUDFLARE_API_TOKEN: ${CLOUDFLARE_API_TOKEN:-}
      CLOUDFLARE_API_KEY: ${CF_API_KEY:-}
      CLOUDFLARE_EMAIL: ${CF_EMAIL:-}

  acme:
    image: neilpang/acme.sh:latest
    container_name: waf-acme
    volumes:
      # Certificate storage (volume for persistence)
      - waf-certs:/acme.sh
      # NGINX config (read-only via volume)
      - waf-nginx-conf:/etc/nginx/conf.d:ro
    networks:
      - waf-network
    environment:
      - ACME_SH_EMAIL=${ACME_EMAIL:-admin@example.com}
      - TZ=${TZ:-Europe/Berlin}
      # Cloudflare credentials for DNS-01 challenge
      # acme.sh expects CF_Token (API Token) or CF_Key + CF_Email (Global API Key)
      - CF_Token=${CLOUDFLARE_API_TOKEN:-}
      - CF_Key=${CF_API_KEY:-}
      - CF_Email=${CF_EMAIL:-}
    command: daemon
    restart: unless-stopped

  # Web Dashboard (Catboy themed!)
  web-dashboard:
    build:
      context: ./web-dashboard
      dockerfile: Dockerfile
    container_name: waf-web-dashboard
    ports:
      - "8080:80"
    # Application code (now built into image)
    networks:
      - waf-network
    restart: unless-stopped
    environment:
      API_URL: http://dashboard:80
      DASHBOARD_API_KEY: ${DASHBOARD_API_KEY:-change-this-default-token}
      TZ: ${TZ:-Europe/Berlin}

  # Catch-all backend for unknown hosts
  default-backend:
    image: nginx:alpine
    container_name: waf-default-backend
    volumes:
      # Static content from host
      - ./backends/default:/usr/share/nginx/html:ro
    networks:
      - backend-network
    restart: unless-stopped

  # Log parser service
  log-parser:
    build:
      context: ./log-parser
      dockerfile: Dockerfile
    container_name: waf-log-parser
    volumes:
      # Data volumes (read-only access to logs)
      - waf-logs:/var/log
    # Application code (now built into image)
    networks:
      - waf-network
    restart: unless-stopped
    depends_on:
      - mariadb
    environment:
      TZ: ${TZ:-Europe/Berlin}
      DB_HOST: mariadb
      DB_NAME: waf_db
      DB_USER: waf_user
      DB_PASSWORD: ${DB_PASSWORD:-changeme}

networks:
  waf-network:
    driver: bridge
  backend-network:
    driver: bridge

volumes:
  # Named volumes for persistent data
  waf-mysql-data:
    name: waf-mysql-data
  waf-fail2ban:
    name: waf-fail2ban
  waf-certs:
    name: waf-certs
  waf-logs:
    name: waf-logs
  waf-web-dashboard:
    name: waf-web-dashboard
  # Configuration volumes
  waf-nginx-conf:
    name: waf-nginx-conf
  waf-nginx-sites:
    name: waf-nginx-sites
  waf-nginx-modsecurity:
    name: waf-nginx-modsecurity
  # waf-default-backend removed - now using direct host mount
  fail2ban-socket:
    name: fail2ban-socket
